*chad-tree.lua* A File Explorer For Neovim Written In Lua

==============================================================================
CONTENTS                                                           *chad-tree*

  1. Introduction                             |chad-tree-introduction|
  2. Quickstart                               |chad-tree-quickstart|
  2.1  Quickstart: Setup                        |chad-tree-quickstart-setup|
  2.2  Quickstart: Help                         |chad-tree-quickstart-help|
  2.3  Quickstart: Custom Mappings              |chad-tree-quickstart-custom-mappings|
  2.4  Quickstart: Highlight                    |chad-tree-quickstart-highlight|
  3. Commands                                 |chad-tree-commands|
  4. Setup                                    |chad-tree-setup|
  5. Opts                                     |chad-tree-opts|
 

==============================================================================
 1. INTRODUCTION                                      *chad-tree-introduction*

Features

    - Automatic updates
    - File type icons
    - Git integration
    - Diagnostics integration: LSP and COC
    - (Live) filtering
    - Cut, copy, paste, rename, delete, create
    - Highly customisable

File Icons

    https://github.com/chad-tree/nvim-web-devicons is optional and used to display file icons.
    It requires a patched font: https://www.nerdfonts.com
    Your terminal emulator must be configured to use that font, usually "Hack Nerd Font"

     should look like an open folder.

    To disable the display of icons see |renderer.icons.show|

Colours

    Syntax highlighting uses g:terminal_color_ from colorschemes, falls back to
    ugly colors otherwise.

Git Integration

    One or two icons for git status. When two are shown, the left is staged.

      ✗  unstaged
      ✓  staged
        unmerged
      ➜  renamed
      ★  untracked
        deleted
      ◌  ignored

Requirements

    This file explorer requires `neovim >= 0.9.0`

==============================================================================
 2. QUICKSTART                                          *chad-tree-quickstart*

Install the plugins via your package manager:
  `"chad-tree/chad-tree.lua"`
  `"chad-tree/nvim-web-devicons"`

Disabling |netrw| is strongly advised, see |chad-tree-netrw|

 owever you may customise
via |chad-tree.on_attach| e.g. >

  local function my_on_attach(bufnr)
    local api = require "chad-tree.api"

    local function opts(desc)
      return { desc = "chad-tree: " .. desc, buffer = bufnr, noremap = true, silent = true, nowait = true }
    end

    -- default mappings
    api.config.mappings.default_on_attach(bufnr)

    -- custom mappings
    vim.keymap.set('n', '<C-t>', api.tree.change_root_to_parent,        opts('Up'))
    vim.keymap.set('n', '?',     api.tree.toggle_help,                  opts('Help'))
  end

  -- pass to setup along with your other options
  require("chad-tree").setup {
    ---
    on_attach = my_on_attach,
    ---
  }
<
==============================================================================
 2.4 QUICKSTART: HIGHLIGHT                    *chad-tree-quickstart-highlight*

Run |:ChadTreeHiTest| to show all the highlights that chad-tree uses.

They can be customised before or after setup is called and will be immediately
applied at runtime. e.g. >

    vim.cmd([[
        :hi      ChadTreeExecFile    guifg=#ffa0a0
        :hi      ChadTreeSpecialFile guifg=#ff80ff gui=underline
        :hi      ChadTreeSymlink     guifg=Yellow  gui=italic
        :hi link ChadTreeImageFile   Title
    ]])
<
See |chad-tree-highlight| for details.

==============================================================================
 3. COMMANDS                                              *chad-tree-commands*

*:ChadTreeOpen*

    Opens the tree. See |chad-tree-api.tree.open()|

    Calls: `api.tree.open({ path = "<args>" })`

*:ChadTreeClose*

    Closes the tree. See |chad-tree-api.tree.close()|

    Calls: `api.tree.close()`

*:ChadTreeToggle*

    Open or close the tree. See |chad-tree-api.tree.toggle()|

    Calls: `api.tree.toggle({ path = "<args>", find_file = false, update_root = false, focus = true, })`

*:ChadTreeFocus*

    Open the tree if it is closed, and then focus on the tree.

    See |chad-tree-api.tree.open()|

    Calls: `api.tree.open()`

*:ChadTreeRefresh*

    Refresh the tree. See |chad-tree-api.tree.reload()|

    Calls: `api.tree.reload()`

*:ChadTreeFindFile*

    The command will change the cursor in the tree for the current bufname.

    It will also open the leafs of the tree leading to the file in the buffer
    (if you opened a file with something else than the ChadTree, like `fzf` or
    `:split`)

    Invoke with a bang `:ChadTreeFindFile!` to update the root.

    See |chad-tree-api.tree.find_file()|

    Calls: `api.tree.find_file({ update_root = <bang>, open = true, focus = true, })`

*:ChadTreeFindFileToggle*

    close the tree or change the cursor in the tree for the current bufname,
    similar to combination of |:ChadTreeToggle| and |:ChadTreeFindFile|. Takes an
    optional path argument.

    Invoke with a bang `:ChadTreeFindFileToggle!` to update the root.

    See |chad-tree-api.tree.toggle()|

    Calls: `api.tree.toggle({ path = "<args>", update_root = <bang>, find_file = true, focus = true, })`

*:ChadTreeClipboard*

    Print clipboard content for both cut and copy

    See |chad-tree-api.fs.print_clipboard()|

    Calls: `api.fs.print_clipboard()`

*:ChadTreeResize*

    Resize the ChadTree window to the given size. Example: `:ChadTreeResize 50`
    resizes the window to the width of 50. If the size starts with "+" or "-" it
    adds or removes the given value to the current window width.
    Example `:ChadTreeResize -20` removes the value 20 from the current width. And
    `:ChadTreeResize +20` adds the value 20 to the current width.

*:ChadTreeCollapse*

    Collapses the chad-tree recursively.

    See |chad-tree-api.tree.collapse_all()|

    Calls: `api.tree.collapse_all(false)`

*:ChadTreeCollapseKeepBuffers*

    Collapses the chad-tree recursively, but keep the directories open, which are
    used in an open buffer.

    See |chad-tree-api.tree.collapse_all()|

    Calls: `api.tree.collapse_all(true)`

*:ChadTreeHiTest*

    Show chad-tree highlight groups similar to `:so $VIMRUNTIME/syntax/hitest.vim`

    See |chad-tree-api.diagnostics.hi_test()|

    Calls: `api.diagnostics.hi_test()`
